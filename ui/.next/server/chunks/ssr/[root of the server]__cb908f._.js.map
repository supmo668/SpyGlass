{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/gemechutaye/Downloads/spyGlass/SpyGlass-zkysar-ui%202/ui/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer\n} from \"recharts\";\nimport Papa from \"papaparse\";\n\ninterface CSVRow {\n  Trend: string;\n  \"Startup Opportunity\": string;\n  \"Related trends\": string;\n  \"Growth rate, WoW\": string;\n  \"YC chances\": string;\n  \"2025\": string;\n  \"2026\": string;\n  \"2027\": string;\n  \"2028\": string;\n  \"2029\": string;\n  \"2030\": string;\n  // you can add additional columns if needed\n}\n\ninterface ProcessedRow extends Omit<CSVRow, \"2025\" | \"2026\" | \"2027\" | \"2028\" | \"2029\" | \"2030\"> {\n  \"2025\": number;\n  \"2026\": number;\n  \"2027\": number;\n  \"2028\": number;\n  \"2029\": number;\n  \"2030\": number;\n}\n\nconst years = [\"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\"];\n\nexport default function Home() {\n  const [csvData, setCsvData] = useState<ProcessedRow[]>([]);\n  const [selectedOpportunity, setSelectedOpportunity] = useState<ProcessedRow | null>(null);\n\n  // Load CSV data on mount\n  useEffect(() => {\n    fetch(\"/Gemini Advanced 20 Pro Experimental.csv\")\n      .then((res) => res.text())\n      .then((csvText) => {\n        Papa.parse(csvText, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (results) => {\n            // Process each row: remove \"%\" and convert year columns to numbers\n            const processed: ProcessedRow[] = results.data.map((row: CSVRow) => {\n              const newRow = { ...row } as ProcessedRow;\n              years.forEach((year) => {\n                if (newRow[year]) {\n                  // Remove \"%\" if present then convert to float\n                  newRow[year] = parseFloat(newRow[year].replace(\"%\", \"\"));\n                } else {\n                  newRow[year] = 0;\n                }\n              });\n              return newRow;\n            });\n            setCsvData(processed);\n          }\n        });\n      });\n  }, []);\n\n  // Pivot the data so that each object corresponds to one year,\n  // with keys for each trend.\n  const pivotedData = years.map((year) => {\n    const obj: { year: string; [key: string]: number | string } = { year };\n    csvData.forEach((row) => {\n      obj[row.Trend] = row[year];\n    });\n    return obj;\n  });\n\n  // For coloring, assign each trend a color from a preset array\n  const colors = [\"#ff0000\", \"#00aa00\", \"#000000\", \"#800080\", \"#FFA500\", \"#008080\"];\n  const getColor = (trend: string, index: number) => colors[index % colors.length];\n\n  // When the mouse moves over the chart, update selectedOpportunity\n  const handleMouseMove = (state: any) => {\n    if (state && state.activePayload && state.activePayload.length > 0) {\n      // activePayload is an array â€“ we take the first item\n      const trendName = state.activePayload[0].dataKey;\n      const selected = csvData.find((row) => row.Trend === trendName);\n      if (selected) setSelectedOpportunity(selected);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 text-gray-800\">\n      {/* Top Navigation/Header */}\n      <header className=\"w-full bg-white shadow-md p-4 flex items-center justify-between\">\n        <div className=\"mx-auto flex-1 max-w-xl\">\n          <input\n            type=\"text\"\n            placeholder=\"Search trends...\"\n            className=\"border border-gray-300 rounded-lg px-4 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-300 transition duration-200\"\n          />\n        </div>\n        <div className=\"flex space-x-2 ml-4\">\n          <button className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition duration-200 shadow-md focus:outline-none focus:ring-2 focus:ring-blue-300\">\n            Button 1\n          </button>\n          <button className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition duration-200 shadow-md focus:outline-none focus:ring-2 focus:ring-green-300\">\n            Button 2\n          </button>\n        </div>\n      </header>\n\n      {/* Main Content Area */}\n      <div className=\"p-4 flex flex-col md:flex-row gap-4\">\n        {/* Left Column: Chart and Opportunities List */}\n        <div className=\"flex-1 flex flex-col space-y-4\">\n          {/* Graph Area */}\n          <div className=\"bg-white shadow-lg rounded-lg p-4\">\n            <div className=\"flex\">\n              {/* Legend on the left */}\n              <div className=\"w-1/4 pr-4 flex flex-col space-y-4\">\n                {csvData.map((row, idx) => (\n                  <div key={row.Trend} className=\"flex items-center space-x-2\">\n                    <div\n                      className=\"w-4 h-4 rounded-full\"\n                      style={{ backgroundColor: getColor(row.Trend, idx) }}\n                    />\n                    <span className=\"text-sm\">{row.Trend}</span>\n                  </div>\n                ))}\n              </div>\n              {/* Chart on the right */}\n              <div className=\"w-3/4\">\n                {pivotedData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart\n                      data={pivotedData}\n                      onMouseMove={handleMouseMove}\n                    >\n                      <XAxis dataKey=\"year\" tick={{ fontSize: 12 }} />\n                      <YAxis domain={[0, 100]} />\n                      <Tooltip />\n                      {csvData.map((row, idx) => (\n                        <Line\n                          key={row.Trend}\n                          type=\"monotone\"\n                          dataKey={row.Trend}\n                          stroke={getColor(row.Trend, idx)}\n                          strokeWidth={2}\n                        />\n                      ))}\n                    </LineChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <p className=\"text-center text-gray-500\">Loading chart...</p>\n                )}\n                <p className=\"text-xs text-gray-600 mt-2 italic\">\n                  Y axis = Growth Rate (%) for each trend.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Opportunities List */}\n          <div className=\"bg-white shadow-lg rounded-lg p-4 h-64 overflow-auto\">\n            <h2 className=\"text-lg font-semibold mb-2\">Opportunities</h2>\n            {csvData.length > 0 ? (\n              <ul className=\"space-y-2\">\n                {csvData.map((op) => (\n                  <li\n                    key={op.Trend}\n                    className={`border p-3 rounded-lg cursor-pointer transition duration-200 hover:shadow-md hover:bg-gray-50 ${\n                      selectedOpportunity?.Trend === op.Trend ? \"bg-gray-100\" : \"\"\n                    }`}\n                    onClick={() => setSelectedOpportunity(op)}\n                  >\n                    <div className=\"font-semibold text-gray-800\">\n                      {op[\"Startup Opportunity\"]}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\n                      Related Trends: {op[\"Related trends\"]}\n                    </div>\n                    <div className=\"text-sm\">\n                      Growth Rate (WoW): {op[\"Growth rate, WoW\"]}\n                    </div>\n                    <div className=\"text-sm\">\n                      YC Chances: {op[\"YC chances\"]}\n                    </div>\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p className=\"text-center text-gray-500\">Loading opportunities...</p>\n            )}\n          </div>\n        </div>\n\n        {/* Right Side Panel: Selected Opportunity Details */}\n        <div className=\"w-full md:w-1/3 bg-white shadow-lg rounded-lg p-4\">\n          {selectedOpportunity ? (\n            <>\n              <h2 className=\"text-lg font-bold mb-2\">\n                {selectedOpportunity[\"Startup Opportunity\"]}\n              </h2>\n              <p className=\"text-sm leading-relaxed text-gray-700\">\n                {selectedOpportunity[\"Related trends\"]}\n              </p>\n              <p className=\"mt-2 text-sm\">\n                Growth Rate (WoW): {selectedOpportunity[\"Growth rate, WoW\"]}\n              </p>\n              <p className=\"mt-2 text-sm\">\n                YC Chances: {selectedOpportunity[\"YC chances\"]}\n              </p>\n            </>\n          ) : (\n            <h2 className=\"text-lg font-bold mb-2\">Select a trend to explore</h2>\n          )}\n        </div>\n      </div>\n\n      {/* Optionally, add a table of all opportunities */}\n      <div className=\"p-4\">\n        <h2 className=\"text-lg font-bold mb-2\">All Opportunities</h2>\n        {csvData.length > 0 ? (\n          <table className=\"w-full border-collapse\">\n            <thead>\n              <tr>\n                <th className=\"border p-2\">Startup Opportunity</th>\n                <th className=\"border p-2\">Related trends</th>\n                <th className=\"border p-2\">Growth rate, WoW</th>\n                <th className=\"border p-2\">YC chances</th>\n              </tr>\n            </thead>\n            <tbody>\n              {csvData.map((row) => (\n                <tr key={row.Trend}>\n                  <td className=\"border p-2\">{row[\"Startup Opportunity\"]}</td>\n                  <td className=\"border p-2\">{row[\"Related trends\"]}</td>\n                  <td className=\"border p-2\">{row[\"Growth rate, WoW\"]}</td>\n                  <td className=\"border p-2\">{row[\"YC chances\"]}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          <p className=\"text-center text-gray-500\">Loading table data...</p>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 572, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}